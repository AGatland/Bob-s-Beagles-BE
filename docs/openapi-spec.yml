openapi: 3.0.3
info:
  title: Bobs Beagles API
  version: 1.0.0
servers:
  - url: http://localhost:4000
tags:
  - name: auth
  - name: products
  - name: inventory
  - name: users
  - name: orders
  - name: basket

paths:
  /auth/signup:
    post:
      tags:
        - auth
      summary: User Signup
      description: Register a new user.
      operationId: userSignup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User fields not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /auth/login:
    post:
      tags:
        - auth
      summary: User Login
      description: Log in with username and password.
      operationId: userLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /products:
    get:
      tags:
        - products
      summary: Get all products
      description: Get a list of all products.
      operationId: getAllProducts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllProducts'
          description: Successful response

    post:
      tags:
        - products
      summary: Create a new product
      description: Add a new product to the database.
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Product created successfully
        '400':
          description: Product fields not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /products/{sku}:
    get:
      tags:
        - products
      summary: Get a specific product
      description: Get details of a specific product.
      operationId: getProduct
      parameters:
        - name: sku
          in: path
          description: The SKU of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Successful response
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      tags:
        - products
      summary: Delete a product
      description: Delete a specific product from the inventory.
      operationId: deleteProduct
      parameters:
        - name: sku
          in: path
          description: The SKU of the product to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      tags:
        - products
      summary: Update a product
      description: Update information about a specific product.
      operationId: updateProduct
      parameters:
        - name: sku
          in: path
          description: The SKU of the product to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '400':
          description: Product fields not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /inventory:
    get:
      tags:
        - inventory
      summary: Get all inventory items
      description: Get a list of all items in inventory.
      operationId: getAllInventoryItems
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItemList'
          description: Successful response

  /inventory/{sku}:
    get:
      tags:
        - inventory
      summary: Get inventory item details
      description: Get details of a specific item in inventory.
      operationId: getInventoryItem
      parameters:
        - name: sku
          in: path
          description: The SKU of the item in inventory to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
          description: Successful response
        '404':
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  paths:
  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users.
      operationId: getAllUsers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get a specific user
      description: Retrieve details of a specific user.
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: The ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    delete:
      tags:
        - users
      summary: Delete a user
      description: Delete a specific user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      tags:
        - users
      summary: Update a user
      description: Update information about a specific user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The ID of the user to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '400':
          description: User fields not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /users/{userId}/orders:
    get:
      tags:
        - orders
      summary: Get all orders for user
      description: Retrieve a list of all orders for a user.
      operationId: getAllOrders
      parameters:
        - name: userId
          in: path
          description: The ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'

    post:
      tags:
        - orders
      summary: Create a new order
      description: Place a new order.
      operationId: createOrder
      parameters:
        - name: userId
          in: path
          description: The ID of the user to retrieve
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Order fields not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Get a specific order
      description: Retrieve details of a specific order.
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          description: The ID of the order to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    put:
      tags:
        - orders
      summary: Update an order
      description: Update information about a specific order.
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: The ID of the order to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '400':
          description: Order fields not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /basket/{id}:
    get:
      tags:
        - basket
      summary: Get user's basket
      description: Retrieve the items in the user's basket.
      operationId: getBasket
      parameters:
        - name: id
          in: path
          description: The ID of the users basket to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketList'
  /basket:
    post:
      tags:
        - basket
      summary: Add item to basket
      description: Add an item to the user's basket.
      operationId: addItemToBasket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasketItem'
      responses:
        '201':
          description: Item added to basket successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketItem'
        '400':
          description: Item fields not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
    put:
      tags:
        - basket
      summary: Update item in basket
      description: Update the quantity of an item in the user's basket.
      operationId: updateItemInBasket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasketItem'
      responses:
        '200':
          description: Item in basket updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketItem'
        '400':
          description: Item fields not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

    delete:
      tags:
        - basket
      summary: Remove item from basket
      description: Remove an item from the user's basket.
      operationId: removeItemFromBasket
      responses:
        '200':
          description: Item removed from basket successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketItem'
        '400':
          description: Item fields not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

components:
  schemas:
    CreateProduct:
      type: object
      required: [name, description, category, img, price]
      properties:
        name:
          type: string
          example: "Product Name"
        description:
          type: string
          example: "Description of the product"
        category:
          type: string
          enum: ["food", "toys", "accessories"]
          example: "toys"
        img:
          type: string
          example: "http://example.com/product_image.jpg"
        price:
          type: number
          format: double
          example: 20.99
    Product:
      type: object
      properties:
        sku:
          type: string
          example: "ABC123"
        name:
          type: string
          example: "Product Name"
        description:
          type: string
          example: "Description of the product"
        category:
          type: string
          example: "toys"
        img:
          type: string
          example: "http://example.com/product_image.jpg"
        price:
          type: number
          format: double
          example: 20.99
    AllProducts:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    InventoryItem:
      type: object
      properties:
        product_sku:
          type: string
          example: "ABC123"
        quantity:
          type: integer
          example: 10
    InventoryItemList:
      type: array
      items:
        $ref: '#/components/schemas/InventoryItem'
    SignupUser:
      type: object
      required: [firstName, lastName, email, password]
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "password123"
        phone:
          type: string
          example: "+1234567890"
        address:
          type: string
          example: "123 Main St, City, Country"
        consent_spam:
          type: boolean
          example: true
    LoginUser:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "password123"
    User:
      type: object
      properties:
        id:
          type: string
          example: "1234567890"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          example: "+1234567890"
        address:
          type: string
          example: "123 Main St, City, Country"
        consent_spam:
          type: boolean
          example: true
    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        phone:
          type: string
          example: "+1234567890"
        address:
          type: string
          example: "123 Main St, City, Country"
        consent_spam:
          type: boolean
          example: true
    CreateOrder:
      type: object
      required: [userId, products]
      properties:
        userId:
          type: string
          example: "1234567890"
        products:
          type: array
          items:
            type: object
            properties:
              sku:
                type: string
                example: "ABC123"
              quantity:
                type: integer
                example: 2
    Order:
      type: object
      properties:
        id:
          type: string
          example: "1234567890"
        status:
          type: string
          example: "Order received"
        date_ordered:
          type: string
          format: date
          example: "2024-03-15"
        userId:
          type: string
          example: "1234567890"
        products:
          type: array
          items:
            type: object
            properties:
              sku:
                type: string
                example: "ABC123"
              quantity:
                type: integer
                example: 2
    OrderList:
      type: array
      items:
        $ref: '#/components/schemas/Order'
    BadRequestError:
      type: object
      properties:
        message:
          type: string
          example: "Bad Request"
    NotFoundError:
      type: object
      properties:
        message:
          type: string
          example: "Not Found"
    UnauthorizedError:
      type: object
      properties:
        message:
          type: string
          example: "Unauthorized"
    BasketItem:
      type: object
      properties:
        userId:
          type: string
          example: "123"
        sku:
          type: string
          example: "ABC123"
        quantity:
          type: integer
          example: 2
    BasketListItem:
      type: object
      properties:
        sku:
          type: string
          example: "ABC123"
        quantity:
          type: integer
          example: 2
    BasketList:
      type: array
      items:
        $ref: '#/components/schemas/BasketListItem'